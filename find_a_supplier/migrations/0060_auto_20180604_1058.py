# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-06-04 10:58
from __future__ import unicode_literals

from pytube import YouTube
import requests
from wagtail.search.backends import get_search_backends
from wagtailmedia.forms import get_media_form
from wagtailmedia.models import get_media_model

from django.core.files.uploadedfile import SimpleUploadedFile
from django.db import migrations

from find_a_supplier.models import (
    IndustryPageArticleSummary, LandingPageArticleSummary
)


def download_video(apps, schema_editor):
    model_classes = [IndustryPageArticleSummary, LandingPageArticleSummary]
    Media = get_media_model()
    MediaForm = get_media_form(Media)

    for model_class in model_classes:
        for model in model_class.objects.all():
            if not hasattr(model, 'video'):
                continue
            video = (
                YouTube(model.video).streams
                .filter(subtype='mp4', progressive=True)
                .order_by('resolution')
                .desc()
                .first()
            )
            thumbnail_url = video.player_config_args['thumbnail_url']
            media = Media(uploaded_by_user=None, type='video')
            video_buffer = video.stream_to_buffer()
            video_buffer.seek(0)
            form = MediaForm(
                {
                    'duration': video.player_config_args['length_seconds'],
                    'title': video.player_config_args['title'],
                    'tags': video.player_config_args['keywords'],
                },
                {
                    'file': SimpleUploadedFile(
                        name=video.player_config_args['title'],
                        content=video_buffer.read(),
                        content_type='video/mp4',
                    ),
                    'thumbnail': SimpleUploadedFile(
                        name=video.player_config_args['title'] +  ' thumbnail',
                        content=requests.get(thumbnail_url).content,
                    )
                },
                instance=media,
                user=None
            )
            assert form.is_valid(), form.errors
            form.save()
            for backend in get_search_backends():
                backend.add(media)

            model.video_media = media
            model.save()


class Migration(migrations.Migration):

    dependencies = [
        ('find_a_supplier', '0059_auto_20180601_1412'),
    ]

    operations = [
        migrations.RunPython(download_video, migrations.RunPython.noop)
    ]


