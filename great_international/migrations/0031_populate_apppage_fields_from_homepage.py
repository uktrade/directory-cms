# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-05-29 10:33
from __future__ import unicode_literals

import json
from django.core.serializers.json import DjangoJSONEncoder
from django.db import migrations
from django.utils import timezone


def populate_apppage_fields_from_homepage(apps, schema_editor):
    HomePage = apps.get_model('great_international', 'InternationalHomePage')
    AppPage = apps.get_model('great_international', 'GreatInternationalApp')
    app_page = AppPage.objects.all().first()
    home_page = HomePage.objects.all().first()
    if app_page and home_page:

        new_title = 'Great International'

        # ------------------------------------------------------------------------
        # Create a revision to capture the changes
        # ------------------------------------------------------------------------

        # Using the home page's live revision as a base, as it should
        # have all the correct field values in place
        revision = home_page.live_revision
        revision.pk = None
        revision.page = app_page
        revision.approved_go_live_at = None
        revision.created_at = timezone.now()

        # Update some values in content_json to match the app_page
        revision_content = json.loads(revision.content_json)
        for field_name in (
            'pk', 'slug', 'path', 'url_path', 'depth', 'numchild',
            'live_revision', 'owner', 'locked'
        ):
            val = getattr(app_page, field_name)
            if hasattr(val, 'pk'):
                # just store ids for foreign keys
                revision_content[field_name] = val.pk
            else:
                revision_content[field_name] = val

        revision_content['title'] = new_title
        revision_content['title_en_gb'] = new_title
        revision_content['draft_title'] = new_title
        revision.content_json = json.dumps(revision_content)
        revision.save()

        # ------------------------------------------------------------------------
        # Update the app page with the values from home page
        # ------------------------------------------------------------------------

        # Don't copy these attributes from the home page
        ignore_attrs = (
            'id', 'owner_id', 'slug', 'live', 'url_path', 'path', 'depth',
            'page_ptr_id', 'live_revision_id', 'first_published_at'
            'content_type_id', 'numchild', 'locked',
            '_live_revision_cache', '_owner_cache', '_state'
        )

        # update app_page values with home_page ones
        for key, val in home_page.__dict__.items():
            if key not in ignore_attrs:
                setattr(app_page, key, val)

        # make the new revision the latest one and set some other
        # sensible values before saving
        app_page.live_revision = revision
        app_page.latest_revision_created_at = revision.created_at
        app_page.last_published_at = revision.created_at
        app_page.has_unpublished_changes = False
        app_page.title_en_gb = new_title
        app_page.draft_title = new_title
        app_page.title = new_title

        # save changes
        app_page.save()


class Migration(migrations.Migration):

    dependencies = [
        ('great_international', '0030_add_homepage_fields_to_apppage'),
    ]

    operations = [
        migrations.RunPython(populate_apppage_fields_from_homepage, migrations.RunPython.noop)
    ]
