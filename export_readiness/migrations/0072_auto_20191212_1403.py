# Generated by Django 2.2.8 on 2019-12-12 14:03

from django.db import migrations


DATA = {
    'Antarctica': ('Antarctica'),
    'Australian islands, Indian Ocean': ('Christmas Island', 'Cocos (Keeling) Islands'),
    'British islands, South Atlantic Ocean': (
        'Ascension',
        'Falkland Islands',
        'Saint Helena',
        'South Georgia and South Sandwich Islands',
        'Tristan da Cunha',
    ),
    'Caribbean': (
        'Anguilla',
        'Antigua and Barbuda',
        'Aruba',
        'Barbados',
        'Bermuda',
        'Bonaire',
        'British Virgin Islands',
        'Cayman Islands',
        'Cuba',
        'Curaçao',
        'Dominica',
        'Dominican Republic',
        'Grenada',
        'Guadeloupe',
        'Haiti',
        'Jamaica',
        'Martinique',
        'Montserrat',
        'Navassa Island',
        'Pitcairn, Henderson, Ducie and Oeno Islands',
        'Puerto Rico',
        'Saba',
        'Saint Barthélemy',
        'Saint-Martin (French part)',
        'Sint Eustatius',
        'Sint Maarten (Dutch part)',
        'St Kitts and Nevis',
        'St Lucia',
        'St Vincent',
        'The Bahamas',
        'Trinidad and Tobago',
        'Turks and Caicos Islands',
        'United States Virgin Islands',
    ),
    'Central America': (
        'Belize',
        'Costa Rica',
        'El Salvador',
        'Guatemala',
        'Honduras',
        'Mexico',
        'Nicaragua',
        'Panama'
    ),
    'East Asia': (
        'China',
        'Hong Kong',
        'Japan',
        'Macao',
        'Mongolia',
        'North Korea',
        'South Korea',
        'Taiwan'
    ),
    'Eastern Europe': (
        'Albania',
        'Belarus',
        'Bosnia and Herzegovina',
        'Bulgaria',
        'Croatia',
        'Estonia',
        'Hungary',
        'Kosovo',
        'Latvia',
        'Lithuania',
        'Moldova',
        'Montenegro',
        'North Macedonia',
        'Poland',
        'Romania',
        'Serbia',
        'Slovakia',
        'Turkey',
        'Ukraine',
    ),
    'French islands, North Atlantic Ocean': (
        'Saint Pierre and Miquelon',
        'French Polynesia'
    ),
    'Middle East': (
        'Abu Dhabi',
        'Afghanistan',
        'Ajman',
        'Bahrain',
        'Dubai',
        'Fujairah',
        'Iran',
        'Iraq',
        'Israel',
        'Jordan',
        'Kuwait',
        'Lebanon',
        'Occupied Palestinian Territories',
        'Oman',
        'Pakistan',
        'Qatar',
        'Ras al-Khaimah',
        'Saudi Arabia',
        'Sharjah',
        'Syria',
        'Umm al-Quwain',
        'United Arab Emirates',
        'Yemen'
    ),
    'North Africa': (
        'Algeria',
        'Ceuta',
        'Egypt',
        'Libya',
        'Melilla',
        'Morocco',
        'Tunisia',
        'Western Sahara'
    ),
    'North America': ('Canada', 'Greenland', 'United States'),
    'Oceania': (
        'Australia',
        'Cook Islands',
        'Fiji',
        'Kiribati',
        'Marshall Islands',
        'Micronesia',
        'Nauru',
        'New Caledonia',
        'New Zealand',
        'Niue',
        'Norfolk Island',
        'Papua New Guinea',
        'Samoa',
        'Solomon Islands',
        'Tokelau',
        'Tonga',
        'Tuvalu',
        'Vanuatu',
        'Wallis and Futuna',
    ),
    'Russia': ('Russia',),
    'Scandinavia': (
        'Åland Islands',
        'Denmark',
        'Faroe Islands',
        'Finland',
        'Iceland',
        'Norway',
        'Svalbard and Jan Mayen',
        'Sweden',
    ),
    'South America': (
        'Argentina',
        'Bolivia',
        'Brazil',
        'Chile',
        'Colombia',
        'Ecuador',
        'French Guiana',
        'Guyana',
        'Paraguay',
        'Peru',
        'Suriname',
        'Uruguay',
        'Venezuela',
    ),
    'South Asia': (
        'Bangladesh',
        'Bhutan',
        'India',
        'Maldives',
        'Nepal',
        'Sri Lanka',
    ),
    'South East Asia': (
        'Brunei',
        'Cambodia',
        'East Timor',
        'Indonesia',
        'Laos',
        'Malaysia',
        'Myanmar (Burma)',
        'Palau',
        'Philippines',
        'Singapore',
        'Thailand',
        'Vietnam',
    ),
    'Southern Europe': (
        'Akrotiri',
        'Cyprus',
        'Dhekelia',
        'Gibraltar',
        'Greece',
        'Italy',
        'Malta',
        'Monaco',
        'Portugal',
        'San Marino',
        'Slovenia',
        'Spain',
        'Vatican City',
    ),
    'Sub Saharan Africa': (
        'Angola',
        'Benin',
        'Botswana',
        'Burkina Faso',
        'Burundi',
        'Cameroon',
        'Cape Verde',
        'Central African Republic',
        'Chad',
        'Comoros',
        'Congo',
        'Congo (Democratic Republic)',
        'Djibouti',
        'Equatorial Guinea',
        'Eritrea',
        'Eswatini',
        'Ethiopia',
        'Gabon',
        'Ghana',
        'Guinea',
        'Guinea-Bissau',
        'Ivory Coast',
        'Kenya',
        'Lesotho',
        'Liberia',
        'Madagascar',
        'Malawi',
        'Mali',
        'Mauritania',
        'Mauritius',
        'Mayotte',
        'Mozambique',
        'Namibia',
        'Niger',
        'Nigeria',
        'Réunion',
        'Rwanda',
        'Sao Tome and Principe',
        'Senegal',
        'Seychelles',
        'Sierra Leone',
        'Somalia',
        'South Africa',
        'South Sudan',
        'Sudan',
        'Tanzania',
        'The Gambia',
        'Togo',
        'Uganda',
        'Zambia',
        'Zimbabwe',
    ),
    'United States islands, Pacific Ocean': (
        'American Samoa',
        'Baker Island',
        'Guam',
        'Howland Island',
        'Jarvis Island',
        'Johnston Atoll',
        'Kingman Reef',
        'Midway Islands',
        'Northern Mariana Islands',
        'Palmyra Atoll',
        'Wake Island',
    ),
    'West Asia': (
        'Armenia',
        'Azerbaijan',
        'Georgia',
        'Kazakhstan',
        'Kyrgyzstan',
        'Tajikistan',
        'Turkmenistan',
        'Uzbekistan',
    ),
    'Western Europe': (
        'Andorra',
        'Austria',
        'Belgium',
        'Czechia',
        'France',
        'Germany',
        'Guernsey',
        'Ireland',
        'Isle of Man',
        'Jersey',
        'Liechtenstein',
        'Luxembourg',
        'Netherlands',
        'Switzerland',
        'United Kingdom'
    )
}


def populate_regions(apps, schema_editor):
    Region = apps.get_model('export_readiness', 'Region')
    Region.objects.bulk_create([
        Region(name=f'{name}') for name in DATA.keys()
    ])


def delete_all_regions(apps, schema_editor):
    Region = apps.get_model('export_readiness', 'Region')
    Region.objects.all().delete()


def populate_countries(apps, schema_editor):
    Country = apps.get_model('export_readiness', 'Country')
    Region = apps.get_model('export_readiness', 'Region')
    for region in DATA.keys():
        region_instance = Region.objects.get(name=region)
        Country.objects.bulk_create([
            Country(name=f'{country[0]}', slug=f'{country[1]}', region=region_instance) for country in DATA[region]
        ])


def delete_all_countries(apps, schema_editor):
    Country = apps.get_model('export_readiness', 'Country')
    Country.objects.all().delete()


def match_country_guides_to_countries(apps, schema_editor):
    CountryGuidePage = apps.get_model('export_readiness', 'CountryGuidePage')
    Country = apps.get_model('export_readiness', 'Country')
    for guide in CountryGuidePage.objects.all():
        if Country.objects.filter(name=guide.heading).exists():
            guide.country = Country.objects.get(name=guide.heading)
            guide.save()



class Migration(migrations.Migration):

    dependencies = [
        ('export_readiness', '0071_auto_20191202_1107'),
    ]

    operations = [
        # Nuke existing countries and regions
        migrations.RunPython(delete_all_regions),
        migrations.RunPython(delete_all_countries),
        migrations.RunPython(populate_regions, reverse_code=delete_all_regions),
        migrations.RunPython(populate_countries, reverse_code=delete_all_countries),
        migrations.RunPython(match_country_guides_to_countries, reverse_code=migrations.RunPython.noop)
    ]
